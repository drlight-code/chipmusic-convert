#!/usr/bin/env python3

# chipmusic-convert
# Convert chiptune tracker formats to wav/ogg/flac conveniently

import sys
import os
import subprocess
import concurrent.futures

import shutil
import glob

import getopt
import datetime

from subprocess import Popen, PIPE
from concurrent.futures import ThreadPoolExecutor

def main():
    # set default config values
    cc_config = {}
    cc_config['tmpdir'] = '/tmp/chipmusic-convert.' + \
                          str(datetime.datetime.now()).replace(' ', '.')
    cc_config['recursive'] = False
    cc_config['overwrite'] = False
    cc_config['formats'] = ['ogg']
    cc_config['numthreads'] = 1
    
    map_ending_type = {}
    map_ending_type['sid'] = 'SID'
    
    sources = parse_arguments(cc_config)
    print_config(cc_config, sources)

    source_filenames = []
    for source in sources:
        source_filenames.extend(collect_source_filenames(
            source, cc_config['recursive'], tuple(map_ending_type)
        ))
    source_filenames.sort()

    os.mkdir(cc_config['tmpdir'])
    os.chdir(cc_config['tmpdir'])

    with ThreadPoolExecutor(max_workers=cc_config['numthreads']) as executor:
        futures = []
        for file in source_filenames:
            fut = executor.submit(convert_file, file, cc_config, map_ending_type)
            futures.append(fut)
        concurrent.futures.wait(futures)

        shutil.rmtree(cc_config['tmpdir'])
    

def print_config(config, sources):
    print("tmpdir:     ", config['tmpdir'])
    print("recursive:  ", config['recursive'])
    print("formats:    ", config['formats'])
    print("numthreads: ", config['numthreads'])
    print()

              
# parse_arguments
#
# returns:
# 1. a dictionary with commandline argument settings
# 2. the remaining non-option arguments
def parse_arguments(config):
    help_text="""chipmusic-convert - convert chip music formats to wav/ogg/flac

  chipmusic-convert [options] source ...

'source' is either a single file one of the supported formats or a
directory with files to be converted. After the options, any number of
source files and directories can be given.

Options:
  -r, --recursive:
    Descend into subdirectories for all directory sources.
  -f, --formats format[,format...]:
    List of formats to save (wav, ogg, flac). Default: ogg
  -d, --destination destdir
    The destination directory where all converted files will be placed. 
    Default: Each output file is placed next to its source file.
  -o, --overwrite
    Regenerate files even if already present.
  -j, --parallel numthreads
    Use numthreads parallel threads for conversion.
    
"""
    
    # parse command line options
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:],
                                       "hrof:d:j:",
                                       ["help",
                                        "recursive",
                                        "overwrite"
                                        "formats=",
                                        "destination=",
                                        "parallel="])
    except getopt.error as msg:
        print(msg)
        print("for help use --help")
        sys.exit(1)

    # process options
    for option, value in opts:
        if option in ("-h", "--help"):
            print(help_text)
            sys.exit(0)
        if option in ("-r", "--recursive"):
            config['recursive'] = True
        if option in ("-o", "--overwrite"):
            config['overwrite'] = True
        if option in ("-d", "--destination"):
            config['destination'] = value
        if option in ("-f", "--formats"):
            config['formats'] = value.split(',')
        if option in ("-j", "--parallel"):
            config['numthreads'] = int(value)
            
    # process arguments
    # for arg in args:
    #     process(arg) # process() is defined elsewhere

    return args


def collect_source_filenames(source, recursive, endings):
    source_filenames = []
    
    if not os.path.exists(source):
        print("WARNING: source " + source + " does not exist! Ignoring.")
        return source_filenames

    if os.path.isdir(source):
        if recursive:
            for dirpath, dirnames, filenames in os.walk(source):
                for filename in filenames:
                    conditional_append(source_filenames,
                                       os.path.abspath(dirpath+'/'+filename),
                                       endings)
        else:
            entries = os.listdir(source)
            for entry in entries:
                if entry.endswith(endings):
                    conditional_append(source_filenames,
                                       os.path.abspath(source+'/'+entry),
                                       endings)
    else:
        conditional_append(source_filenames,
                           os.path.abspath(source),
                           endings)

    return source_filenames

def conditional_append(list, name, endings):
    if name.endswith(endings):
        list.append(name)


def convert_file(file, config, map_ending_type):
    destdir = os.path.dirname(file)
    if 'destination' in config:
        destdir = config['destination']

    if(not os.path.exists(destdir)):
        os.makedirs(destdir)

    for ending in tuple(map_ending_type):
        if file.endswith(ending):
            break
    type = map_ending_type[ending]

    # @todo look command up from map by type
    command = ['sidplay2', '-s', '-w', file]

    filebase = os.path.basename(file[:-(len(ending)+1)])

    # if of any format the target files do not exist...
    rebuildwav = False
    for format in config['formats']:
        if not glob.glob(destdir + '/' + filebase + '*.' + format):
            rebuildwav = True

    if rebuildwav:
        print("Converting " + file)
            
    # ...except when the wav files are present...
    if glob.glob(destdir + '/' + filebase + '*.wav'):
        print(destdir + '/' + filebase + '*.wav' + ' is present')
        rebuildwav = False

    # ... rebuild wav.
    if rebuildwav or config['overwrite']:
        print(' '.join(command))
        p = Popen(command, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate()

    wavfiles = os.listdir('.')
    if not wavfiles:
        wavfiles = glob.glob(destdir + '/' + filebase + '*.wav')
    for wavfile in wavfiles:
        if wavfile.endswith('.wav'):
            if 'wav' in config['formats']:
                wavfile_target = destdir + '/' + wavfile
                if not os.path.exists(wavfile_target) or config['overwrite']:
                    shutil.copy(wavfile, wavfile_target)
            if 'ogg' in config['formats']:
                oggfile = os.path.basename(wavfile[:-3]) + 'ogg'
                oggfile_target = destdir + '/' + oggfile
                if not os.path.exists(oggfile_target) or config['overwrite']:
                    encode_ogg(wavfile, oggfile)
                    shutil.copy(oggfile, oggfile_target)
                    os.remove(oggfile)
            if 'flac' in config['formats']:
                flacfile = os.path.basename(wavfile[:-3]) + 'flac'
                flacfile_target = destdir + '/' + flacfile
                if not os.path.exists(flacfile_target) or config['overwrite']:
                    encode_flac(wavfile, flacfile)
                    shutil.copy(flacfile, flacfile_target)
                    os.remove(flacfile)

        if os.path.exists(os.path.basename(wavfile)):
            os.remove(os.path.basename(wavfile))
        

def encode_ogg(wavfile, oggfile):
    command = ['oggenc', '-q', str(8), '-o', oggfile, wavfile]
    subprocess.call(command)

def encode_flac(wavfile, flacfile):
    command = ['flac', '-8', '-o', flacfile, wavfile]
    subprocess.call(command)

if __name__ == "__main__":
    main()
