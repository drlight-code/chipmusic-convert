#!/usr/bin/env python

# chipmusic-convert
# Convert chiptune tracker formats to wav/ogg/flac conveniently

import sys
import os
import getopt

def main():
    # set default config values
    cc_config = {}
    cc_config['recursive'] = False

    ending_type = {}
    ending_type['sid'] = 'SID'
    print(ending_type.keys())
    
    sources = parse_arguments(cc_config)
    print_config(cc_config, sources)

    source_filenames = []
    for source in sources:
        source_filenames.extend(collect_source_filenames(
            source, cc_config['recursive'], tuple(ending_type)
        ))

    print(source_filenames)
    

def print_config(config, sources):
    print("sources:")
    print(', '.join(sources))

    print()
    print("recursive: ", config['recursive'])
    print()

              
# parse_arguments
#
# returns:
# 1. a dictionary with commandline argument settings
# 2. the remaining non-option arguments
def parse_arguments(config):
    help_text="""chipmusic-convert - convert chip music formats to wav/ogg/flac

Synopsis:
  chipmusic-convert [options] source ...

'source' is either a single file one of the supported formats or a
directory with files to be converted. After the options, any number of
source files and directories can be given.

Options:
  -r, --recursive:
    Descend into subfolders for all folder sources.
"""
    
    # parse command line options
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], "hr", ["help", "recursive"])
    except getopt.error as msg:
        print(msg)
        print("for help use --help")
        sys.exit(1)

    # process options
    for option, value in opts:
        if option in ("-h", "--help"):
            print(help_text)
            sys.exit(0)
        if option in ("-r", "--recursive"):
            config['recursive'] = True
            
    # process arguments
    # for arg in args:
    #     process(arg) # process() is defined elsewhere

    return args


def collect_source_filenames(source, recursive, endings):
    source_filenames = []
    
    if not os.path.exists(source):
        print("WARNING: source " + source + " does not exist! Ignoring.")
        return source_filenames

    if os.path.isdir(source):
        if recursive:
            for dirpath, dirnames, filenames in os.walk(source):
                for filename in filenames:
                    conditional_append(source_filenames,
                                       os.path.abspath(dirpath+'/'+filename),
                                       endings)
        else:
            entries = os.listdir(source)
            for entry in entries:
                if entry.endswith(endings):
                    conditional_append(source_filenames,
                                       os.path.abspath(source+'/'+entry),
                                       endings)
    else:
        conditional_append(source_filenames,
                           os.path.abspath(source),
                           endings)

    return source_filenames

def conditional_append(list, name, endings):
    if name.endswith(endings):
        list.append(name)


if __name__ == "__main__":
    main()
