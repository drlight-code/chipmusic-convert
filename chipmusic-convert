#!/usr/bin/env python3

# chipmusic-convert
# Convert chiptune tracker formats to wav/ogg/flac conveniently

import sys
import os
import subprocess
import concurrent.futures

import shutil
import glob

import getopt
import datetime

from subprocess import Popen, PIPE
from concurrent.futures import ThreadPoolExecutor

def main():
    # set default config values
    cc_config = {}
    cc_config['tmpdir'] = '/tmp/chipmusic-convert.' + \
                          str(datetime.datetime.now()).replace(' ', '.')
    cc_config['verbose']   = False
    cc_config['recursive'] = False
    cc_config['overwrite'] = False
    cc_config['formats'] = ['ogg']
    cc_config['quality'] = str(8)
    cc_config['numthreads'] = 1
    
    map_ending_type = {
        'sid'  : 'SID',
        'SID'  : 'SID',
        'snd'  : 'SC68',
        'SND'  : 'SC68',
        'sndh' : 'SC68',
        'SNDH' : 'SC68',
        'sc68' : 'SC68',
        'SC68' : 'SC68',
        'sap'  : 'SAP',
        'SAP'  : 'SAP',
    }

    sources = parse_arguments(cc_config)
    print_config(cc_config, sources)

    source_filenames = []
    for source in sources:
        source_filenames.extend(collect_source_filenames(
            source, cc_config['recursive'], tuple(map_ending_type)
        ))
    source_filenames.sort()

    os.mkdir(cc_config['tmpdir'])
    os.chdir(cc_config['tmpdir'])

    with ThreadPoolExecutor(max_workers=cc_config['numthreads']) as executor:
        futures = []
        for file in source_filenames:
            fut = executor.submit(convert_file, file, cc_config, map_ending_type)
            futures.append(fut)

        for fut in futures:
            if(fut.exception()):
                print(fut.exception())

        shutil.rmtree(cc_config['tmpdir'])
    

def print_config(config, sources):
    print("tmpdir:     ", config['tmpdir'])
    print("recursive:  ", config['recursive'])
    print("formats:    ", config['formats'])
    print("quality:    ", config['quality'])
    print("numthreads: ", config['numthreads'])
    print()

              
# parse_arguments
#
# returns:
# 1. a dictionary with commandline argument settings
# 2. the remaining non-option arguments
def parse_arguments(config):
    help_text="""chipmusic-convert - convert chip music formats to wav/ogg/flac

  chipmusic-convert [options] source ...

'source' is either a single file one of the supported formats or a
directory with files to be converted. After the options, any number of
source files and directories can be given.

Options:
  -d, --destination destdir
    The destination directory where all converted files will be placed. 
    Default: Each output file is placed next to its source file.
  -f, --formats format[,format...]:
    List of formats to save (wav, ogg, flac). Default: ogg
  -j, --parallel numthreads
    Use numthreads parallel threads for conversion.
  -o, --overwrite
    Regenerate files even if already present.
  -q, --quality
    Quality for ogg encoding (10 best - 0 worse). Default: 8
  -r, --recursive:
    Descend into subdirectories for all directory sources.
  -v, --verbose
    Show child process output.    
"""
    
    # parse command line options
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:],
                                       "hvrof:q:d:j:",
                                       ["help",
                                        "verbose"
                                        "recursive",
                                        "overwrite"
                                        "formats=",
                                        "quality=",
                                        "destination=",
                                        "parallel="])
    except getopt.error as msg:
        print(msg)
        print("for help use --help")
        sys.exit(1)

    # process options
    for option, value in opts:
        if option in ("-h", "--help"):
            print(help_text)
            sys.exit(0)
        if option in ("-v", "--verbose"):
            config['verbose'] = True
        if option in ("-r", "--recursive"):
            config['recursive'] = True
        if option in ("-o", "--overwrite"):
            config['overwrite'] = True
        if option in ("-d", "--destination"):
            config['destination'] = value
        if option in ("-f", "--formats"):
            config['formats'] = value.split(',')
        if option in ("-q", "--quality"):
            config['quality'] = value
        if option in ("-j", "--parallel"):
            config['numthreads'] = int(value)
            
    return args


def collect_source_filenames(source, recursive, endings):
    source_filenames = []
    
    if not os.path.exists(source):
        print("WARNING: source " + source + " does not exist! Ignoring.")
        return source_filenames

    if os.path.isdir(source):
        if recursive:
            for dirpath, dirnames, filenames in os.walk(source):
                for filename in filenames:
                    conditional_append(source_filenames,
                                       os.path.abspath(dirpath+'/'+filename),
                                       endings)
        else:
            entries = os.listdir(source)
            for entry in entries:
                if entry.endswith(endings):
                    conditional_append(source_filenames,
                                       os.path.abspath(source+'/'+entry),
                                       endings)
    else:
        conditional_append(source_filenames,
                           os.path.abspath(source),
                           endings)

    return source_filenames

def conditional_append(list, name, endings):
    if name.endswith(endings):
        list.append(name)


def convert_file(file, config, map_ending_type):
    destdir = os.path.dirname(file)
    if 'destination' in config:
        destdir = config['destination']

    if(not os.path.exists(destdir)):
        os.makedirs(destdir)

    for ending in tuple(map_ending_type):
        if file.endswith(ending):
            break
    type = map_ending_type[ending]

    filebase = os.path.basename(file[:-(len(ending)+1)])

    # if of any format the target files do not exist...
    rebuildwav = False
    for format in config['formats']:
        if not glob.glob(destdir + '/' + filebase + '*.' + format):
            rebuildwav = True

    if rebuildwav:
        print("Converting: " + file)
            
    # ...except when the wav files are present...
    if glob.glob(destdir + '/' + filebase + '*.wav'):
        rebuildwav = False

    # ... rebuild wav.
    if rebuildwav or config['overwrite']:
        render_to_wavfile(type, file,
                          filebase+'.wav',
                          config['verbose'])
        
    conversion_formats = list(config['formats'])
    if 'wav' in conversion_formats:
         conversion_formats.remove('wav')

    wavfiles = glob.glob(filebase + '*.wav')
    if not wavfiles:
        wavfiles = glob.glob(destdir + '/' + filebase + '*.wav')

    for wavfile in wavfiles:
        if wavfile.endswith('.wav'):
            if 'wav' in config['formats']:
                wavfile_target = destdir + '/' + os.path.basename(wavfile)
                if not os.path.exists(wavfile_target) or config['overwrite']:
                    shutil.copy(wavfile, wavfile_target)

            for format in conversion_formats:
                outfile = os.path.basename(wavfile[:-3]) + format
                outfile_target = destdir + '/' + outfile
                if not os.path.exists(outfile_target) or config['overwrite']:
                    encode_wavfile(type, format, config['quality'],
                                   wavfile, outfile,
                                   config['verbose'])
                    shutil.copy(outfile, outfile_target)
                    os.remove(outfile)

        if os.path.exists(os.path.basename(wavfile)):
            os.remove(os.path.basename(wavfile))

def render_to_wavfile(type, infile, wavfile, verbose):
    {
        'SID'  : render_sid,
        'SC68' : render_sc68,
        'SAP'  : render_sap,
    }[type](infile, wavfile, verbose)


def render_sid(infile, wavfile, verbose):
    command = ['sidplay2', '-s', '-w', infile]

    if verbose:
        print(' '.join(command))
        p = Popen(command)
        stdout, stderr = p.communicate()
    else:
        p = Popen(command, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate()

def render_sc68(infile, wavfile, verbose):
    command = ['sc68', infile]
        
    if verbose:
        print(' '.join(command))
        p = Popen(command, stdout=PIPE)
        stdout, stderr = p.communicate()
    else:
        p = Popen(command, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate()

    outfile = open(wavfile, 'wb')
    outfile.write(stdout)

def render_sap(infile, wavfile, verbose):
    command = ['asapconv', '-o', wavfile, infile]

    if verbose:
        print(' '.join(command))
        p = Popen(command)
        stdout, stderr = p.communicate()
    else:
        p = Popen(command, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate()

def encode_wavfile(type, format, quality, wavfile, outfile, verbose):
    if format == 'ogg':
        command = ['oggenc', '-q', quality]

        if type == 'SC68':
            command.extend(['--raw'])
            
    if format == 'flac':
        command = ['flac', '-8']

        if type == 'SC68':
            command.extend(['--force-raw-format',
                            '--endian=little',
                            '--sign=signed',
                            '--channels=2',
                            '--bps=16',
                            '--sample-rate=44100'])
                           
    command.extend(['-o', outfile, wavfile])

    if verbose:
        print(' '.join(command))
        subprocess.call(command)
    else:
        print('Encoding: ' + outfile)
        p = Popen(command, stdout=PIPE, stderr=PIPE)
        stdout, stderr = p.communicate()

    
if __name__ == '__main__':
    main()
